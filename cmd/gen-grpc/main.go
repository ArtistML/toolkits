package main

import (
	"embed"
	"fmt"
	"os"
	"strings"
	"text/template"

	"github.com/jessevdk/go-flags"
)

const (
	header = "// Code generated by github.com/artistml/toolkits/cmd/gen-grpc. DO NOT EDIT.\n"
)

var (
	// Example:
	// go run "github.com/artistml/toolkits/cmd/gen-grpc" -n echo -d github.com/artistml/toolkits/pkg/proto -v v1 -v v2 -s v1.EchoService -s v2.EchoService -i github.com/artistml/toolkits/pkg/interceptor/logging gateway rpc
	opts struct {
		PackageName            string   `required:"true" short:"n" long:"package-name" description:"Generated package name" json:"PackageName"`
		ProtoDir               string   `required:"true" short:"d" long:"proto-dir" description:"Dir of pkg/proto/{PackageName}" json:"ProtoDir"`
		ProtoVersions          []string `required:"true" short:"v" long:"proto-versions" description:"Proto version relative to pkg/proto/{PackageName}" json:"ProtoVersions"`
		GRPCServiceNames       []string `required:"true" short:"s" long:"grpc-service-names" description:"GRPC service names to register in generated code {PackageName}{version}.{ServiceName}" json:"GRPCServiceNames"`
		InterceptorPackages    []string `required:"true" short:"i" long:"interceptor-package-names" description:"Interceptor for server" json:"InterceptorPackages"`
		RegisterHandlerMethods []string `required:"false" json:"RegisterHandlerMethods"`
		RegisterServerMethods  []string `required:"false" json:"RegisterServerMethods"`
		Imports                []string `required:"false" json:"Imports"`
	}
	//go:embed templates/*.tmpl
	fs embed.FS
)

func main() {
	files, err := flags.Parse(&opts)
	if err != nil {
		panic(err)
	}
	opts.RegisterHandlerMethods = []string{}
	opts.RegisterServerMethods = []string{}
	for _, packageName := range opts.GRPCServiceNames {
		pks := strings.Split(packageName, ".")
		opts.RegisterHandlerMethods = append(opts.RegisterHandlerMethods, fmt.Sprintf("%s%s.Register%s", opts.PackageName, pks[0], pks[1]))
		opts.RegisterServerMethods = append(opts.RegisterServerMethods, fmt.Sprintf("%s%s.Register%sServer(rpc, srv.(%s%s.%sServer))", opts.PackageName, pks[0], pks[1], opts.PackageName, pks[0], pks[1]))
	}
	opts.Imports = []string{}
	for _, version := range opts.ProtoVersions {
		opts.Imports = append(opts.Imports, fmt.Sprintf("%s%s \"%s/%s/%s\"", opts.PackageName, version, opts.ProtoDir, opts.PackageName, version))
	}

	templates, err := template.ParseFS(fs, "templates/*.tmpl")
	if err != nil {
		panic(err)
	}

	for _, file := range files {
		var (
			input  = file + ".go.tmpl"
			output = file + "_gen.go"
		)
		func() {
			f, err := os.Create(output)
			if err != nil {
				panic(err)
			}
			defer func() {
				_ = f.Sync()
				_ = f.Close()
			}()

			_, err = f.WriteString(header)
			if err != nil {
				panic(err)
			}
			err = templates.ExecuteTemplate(f, input, &opts)
			if err != nil {
				panic(err)
			}
		}()
	}
}
