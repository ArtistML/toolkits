package main

import (
	"embed"
	"fmt"
	"os"
	"os/exec"
	"path"
	"strings"
	"text/template"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/util/gconv"
	"github.com/jessevdk/go-flags"
)

const (
	header = "// Code generated by github.com/artistml/toolkits/cmd/gen-grpc. DO NOT EDIT.\n"
)

type ServerConfig struct {
	Name           string   `required:"true" json:"name"`
	Path           string   `required:"true" json:"path"`
	ProtoPkg       string   `required:"false" json:"protoPkg"`
	InterceptorPkg string   `required:"true" json:"interceptorPkg"`
	Intercepters   []string `required:"true" json:"intercepters"`
	Protos         []struct {
		ProtoPkg       string   `required:"false" json:"protoPkg"`
		Pkg     string   `required:"true" json:"pkg"`
		Version string   `required:"true" json:"version"`
		Rpcs    []string `required:"true" json:"rpcs"`
	} `required:"true" json:"protos"`
}

type Config struct {
	PackageName            string   `description:"Generated package name" json:"PackageName"`
	Path                   string   `required:"true" json:"path"`
	InterceptorPackages    []string `description:"Interceptor for server" json:"InterceptorPackages"`
	RegisterHandlerMethods []string `json:"RegisterHandlerMethods"`
	RegisterServerMethods  []string `json:"RegisterServerMethods"`
	Imports                []string `json:"Imports"`
}

var (
	// Example:
	// go run "github.com/artistml/toolkits/cmd/gen-grpc" -c config
	// go run "github.com/artistml/toolkits/cmd/gen-grpc" -c $HOME/{project}/config

	opts struct {
		ConfigPath string `required:"true" short:"c" long:"config-path" description:"Config releactive path" json:"ConfigPath"`
	}

	//go:embed templates/*.tmpl
	fs embed.FS
)

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	rootPath, err := os.Getwd()
	checkErr(err)
	_, err = flags.Parse(&opts)
	checkErr(err)
	if !strings.HasPrefix(opts.ConfigPath, "/") {
		// use rootPath to join absolute path.
		opts.ConfigPath = path.Join(rootPath, opts.ConfigPath)
	}
	err = g.Cfg().SetPath(opts.ConfigPath)
	checkErr(err)

	cmd := exec.Command("sh", "-c", fmt.Sprintf("go list %s/...", g.Cfg().GetString("interceptorPkg")))
	stdout, err := cmd.Output()
	checkErr(err)
	interceptorPackages := []string{}
	for _, val := range strings.Split(string(stdout), "\n") {
		val = strings.TrimSpace(val)
		if len(val) == 0 {
			continue
		}
		interceptorPackages = append(interceptorPackages, val)
	}

	var servers []ServerConfig
	for _, val := range g.Cfg().GetArray("services") {
		server := new(ServerConfig)
		err = gconv.Struct(val, server)
		checkErr(err)
		servers = append(servers, *server)
	}
	fmt.Println("servers len:", len(servers))
	serversConfig := []Config{}
	for _, server := range servers {
		config := Config{}
		config.PackageName = server.Name
		config.Path = server.Path
		config.InterceptorPackages = interceptorPackages
		config.RegisterHandlerMethods = []string{}
		config.RegisterServerMethods = []string{}
		config.Imports = []string{}
		for _, proto := range server.Protos {
			for _, rpc := range proto.Rpcs {
				config.RegisterHandlerMethods = append(config.RegisterHandlerMethods, fmt.Sprintf("%s%s.Register%s", proto.Pkg, proto.Version, rpc))
				config.RegisterServerMethods = append(config.RegisterServerMethods, fmt.Sprintf("%s%s.Register%sServer(rpc, srv.(%s%s.%sServer))", proto.Pkg, proto.Version, rpc, proto.Pkg, proto.Version, rpc))
			}
			version := ""
			if len(proto.Version) > 0 {
				version = fmt.Sprintf("/%s", proto.Version)
			}
			protoPkg := server.ProtoPkg
			if len(proto.ProtoPkg) > 0 {
				protoPkg = proto.ProtoPkg
			}
			config.Imports = append(config.Imports, fmt.Sprintf("%s%s \"%s/%s%s\"", proto.Pkg, proto.Version, protoPkg, proto.Pkg, version))
		}
		serversConfig = append(serversConfig, config)
	}

	templates, err := template.ParseFS(fs, "templates/*.tmpl")
	if err != nil {
		panic(err)
	}
	var files []string
	for _, val := range g.Cfg().GetArray("templates") {
		files = append(files, gconv.String(val))
	}
	for _, file := range files {
		for _, config := range serversConfig {
			err = os.MkdirAll(path.Join(rootPath, config.Path), os.ModePerm)
			checkErr(err)
			var (
				input  = file + ".go.tmpl"
				output = path.Join(rootPath, config.Path, file+"_gen.go")
			)
			func() {
				f, err := os.Create(output)
				if err != nil {
					panic(err)
				}
				defer func() {
					_ = f.Sync()
					_ = f.Close()
				}()

				_, err = f.WriteString(header)
				if err != nil {
					panic(err)
				}
				err = templates.ExecuteTemplate(f, input, &config)
				if err != nil {
					panic(err)
				}
			}()
		}
	}
}
