// Code generated by github.com/artistml/toolkits/cmd/gen-proto. DO NOT EDIT.
syntax = "proto3";
package echo.v1;
option go_package = "github.com/artistml/echo/v1;echoV1";


import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";

import "auth/v1/options.proto";
import "echo/v1/greeting.proto";

// The service that handles the CRUD of Greeting.
service GreetingService {

  option (google.api.default_host) = "github.com/artistml/toolkits";
  // Creates a Greeting.
  rpc CreateGreeting(CreateGreetingRequest) returns (CreateGreetingResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      post: "/v1/{parent=echos}/greetings"
      body: "greeting"
    };
    option (google.api.method_signature) = "parent,greeting";
  }

  // Gets a Greeting.
  rpc GetGreeting(GetGreetingRequest) returns (GetGreetingResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      get: "/v1/echos/greetings/{id=*}"
    };
    option (google.api.method_signature) = "id";
  }

  // Updates a Greeting.
  rpc UpdateGreeting(UpdateGreetingRequest) returns (UpdateGreetingResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      patch: "/v1/echos/greetings/{greeting.id=*}"
      body: "greeting"
    };
    option (google.api.method_signature) = "greeting,update_mask";
  }

  // Lists Greetings in a Location.
  rpc ListGreetings(ListGreetingsRequest) returns (ListGreetingsResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      get: "/v1/{parent=echos}/greetings"
    };
    option (google.api.method_signature) = "parent";
  }

  // Deletes a Greeting.
  rpc DeleteGreeting(DeleteGreetingRequest) returns (DeleteGreetingResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      delete: "/v1/echos/greetings/{id=*}"
    };
    option (google.api.method_signature) = "id";
  }

  // Batch delete Greeting by filter.
  rpc DeleteGreetings(DeleteGreetingsRequest) returns (DeleteGreetingsResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      patch: "/v1/echos/greetings"
      body: "*"
    };
  }


  // Exports a Greeting.
  rpc ExportGreeting(ExportGreetingRequest) returns (ExportGreetingResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      post: "/v1/{parent=echos/greetings}:export"
      body: "*"
    };
    option (google.api.method_signature) = "parent,export_config";
  }
}

// Request message for [GreetingService.CreateGreeting][v1.GreetingService.CreateGreeting].
message CreateGreetingRequest {
  // Required. The resource name of the ParentUri to create the Greeting in.
  // Format: `echos`
  string parent = 1;

  // Required. The Greeting to create.
  Greeting greeting = 2;
}

// Response message for [GreetingService.CreateGreeting][v1.GreetingService.CreateGreeting].
message CreateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.GetGreeting][v1.GreetingService.GetGreeting].
message GetGreetingRequest {
  // Required. The id of the Greeting in database.
  int64 id = 1;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 2;
}

// Response message for [GreetingService.GetGreeting][v1.GreetingService.GetGreeting].
message GetGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.UpdateGreeting][v1.GreetingService.UpdateGreeting].
message UpdateGreetingRequest {
  // Required. The Greeting which replaces the resource on the server.
  Greeting greeting = 1;

  // Required. The update mask applies to the resource.
  // For the `FieldMask` definition, see [google.protobuf.FieldMask][google.protobuf.FieldMask].
  // Updatable fields:
  //
  //   * `id`
  //   * `update_at`
  //   * `create_at`
  google.protobuf.FieldMask update_mask = 2;
}

// Response message for [GreetingService.UpdateGreeting][v1.GreetingService.UpdateGreeting].
message UpdateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.ListGreetings][v1.GreetingService.ListGreetings].
message ListGreetingsRequest {
  // Required. The name of the Greeting's parent resource.
  // Format: `echos`
  string parent = 1;

  // The standard page number, start with zero, use cursor or size as page rotation.
  int32 page = 2;

  // The standard list page size.
  int32 size = 3;

  // The standard list page cursor.
  string cursor = 4;

  // The search keyword.
  string query = 5;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 6;

  // A comma-separated list of fields to order by, sorted in ascending order.
  // Use "desc" after a field name for descending.
  // Supported fields:
  //   * `create_at`
  //   * `update_at`
  string order_by = 7;

  // filter struct for list.
  GreetingFilter f = 8;
}

// Response message for [GreetingService.ListGreetings][v1.GreetingService.ListGreetings].
message ListGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  message Details {
    // A list of Greetings that matches the specified filter in the request.
    repeated Greeting items = 1;
    // next page number.
    int32 next_page = 2;
    // next page size.
    int32 next_size = 3;
    // next page cursor.
    string next_cursor = 4;
    // total items count of this filter.
    int32 total_count = 5;
  }
  Details details = 3;
}

// Request message for [GreetingService.DeleteGreeting][v1.GreetingService.DeleteGreeting].
message DeleteGreetingRequest {
  // Required. The resource name of the Greeting to delete.
  // Format:
  // `echos/greetings/{id}`
  int64 id = 1;
}

// Response message for [GreetingService.DeleteGreeting][v1.GreetingService.DeleteGreeting].
message DeleteGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.DeleteGreetings][v1.GreetingService.DeleteGreetings].
message DeleteGreetingsRequest {
  // filter struct for delete items.
  GreetingFilter f = 1;
}

// Response message for [GreetingService.DeleteGreetings][v1.GreetingService.DeleteGreetings].
message DeleteGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // deleted id list.
  repeated int64 details = 3;
}




// Request message for [GreetingService.ExportGreeting][v1.GreetingService.ExportGreeting].
message ExportGreetingRequest {
  // Required. The name of the Greeting resource.
  // Format:
  // `echos/greetings`
  string parent = 1;

  // Required. The desired output location.
  ExportGreetingConfig export_config = 2;
}

// Response message for [GreetingService.ExportGreeting][v1.GreetingService.ExportGreeting].
message ExportGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // All of the files that are exported in this export operation.
  repeated string details = 3;
}
