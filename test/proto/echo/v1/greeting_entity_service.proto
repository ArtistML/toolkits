// Code generated by github.com/artistml/toolkits/cmd/gen-proto. DO NOT EDIT.
syntax = "proto3";
package echo.v1;
option go_package = "github.com/artistml/echo/v1;echoV1";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "auth/v1/options.proto";
import "echo/v1/greeting_entity.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "GreetingEntity Service"
    version: "1.0"
    contact: {
      name: "GreetingEntity Service"
      url: "http://github.com/artistml/toolkits"
    }
  }
  host: "github.com/artistml/toolkits"
  base_path: "/echo/v1/greeting_entity"
  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/toolkits/echo/v1/greeting_entity"
  }
};

// The service that handles the CRUD of GreetingEntity.
service GreetingEntityService {

  option (google.api.default_host) = "github.com/artistml/toolkits";
  // Creates a GreetingEntity.
  rpc CreateGreetingEntity(CreateGreetingEntityRequest)
      returns (CreateGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      post: "/v1/{parent=echo/*}/greeting_entities"
      body: "greeting_entity"
    };
    option (google.api.method_signature) = "parent,greeting_entity";
  }

  // Gets a GreetingEntity.
  rpc GetGreetingEntity(GetGreetingEntityRequest)
      returns (GetGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      get: "/v1/{parent=echo/*}/greeting_entities/{name=*}"
    };
    option (google.api.method_signature) = "parent,name";
  }

  // Updates a GreetingEntity.
  rpc UpdateGreetingEntity(UpdateGreetingEntityRequest)
      returns (UpdateGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      patch: "/v1/{parent=echo/*}/greeting_entities/{greeting_entity.name=*}"
      body: "greeting_entity"
    };
    option (google.api.method_signature) = "parent,greeting_entity,update_mask";
  }

  // Lists GreetingEntitys in a Location.
  rpc ListGreetingEntitys(ListGreetingEntitysRequest)
      returns (ListGreetingEntitysResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      get: "/v1/{parent=echo/*}/greeting_entities"
    };
    option (google.api.method_signature) = "parent";
  }

  // Deletes a GreetingEntity.
  rpc DeleteGreetingEntity(DeleteGreetingEntityRequest)
      returns (DeleteGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      delete: "/v1/{parent=echo/*}/greeting_entities/{name=*}"
    };
    option (google.api.method_signature) = "parent,name";
  }

  // Batch delete GreetingEntity by filter.
  rpc DeleteGreetingEntitys(DeleteGreetingEntitysRequest)
      returns (DeleteGreetingEntitysResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      patch: "/v1/{parent=echo/*}/greeting_entities"
      body: "f"
    };
    option (google.api.method_signature) = "parent,f";
  }

  // Imports a GreetingEntity.
  rpc ImportGreetingEntity(ImportGreetingEntityRequest)
      returns (ImportGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      post: "/v1/{parent=echo/*}/greeting_entities:import"
      body: "import_config"
    };
    option (google.api.method_signature) = "parent,import_config";
  }

  // Exports a GreetingEntity.
  rpc ExportGreetingEntity(ExportGreetingEntityRequest)
      returns (ExportGreetingEntityResponse) {
    option (auth.v1.auth_options) = {require_authentication: true};
    option (google.api.http) = {
      post: "/v1/{parent=echo/*}/greeting_entities:export"
      body: "export_config"
    };
    option (google.api.method_signature) = "parent,export_config";
  }
}

// Request message for [GreetingEntityService.CreateGreetingEntity][v1.GreetingEntityService.CreateGreetingEntity].
message CreateGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The GreetingEntity to create.
  GreetingEntity greeting_entity = 2;
}

// Response message for [GreetingEntityService.CreateGreetingEntity][v1.GreetingEntityService.CreateGreetingEntity].
message CreateGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  GreetingEntity details = 3;
}

// Request message for [GreetingEntityService.GetGreetingEntity][v1.GreetingEntityService.GetGreetingEntity].
message GetGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The id of the GreetingEntity in database.
  int64 id = 2;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 3;
}

// Response message for [GreetingEntityService.GetGreetingEntity][v1.GreetingEntityService.GetGreetingEntity].
message GetGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  GreetingEntity details = 3;
}

// Request message for [GreetingEntityService.UpdateGreetingEntity][v1.GreetingEntityService.UpdateGreetingEntity].
message UpdateGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The GreetingEntity which replaces the resource on the server.
  GreetingEntity greeting_entity = 2;

  // Required. The update mask applies to the resource.
  // For the `FieldMask` definition, see [google.protobuf.FieldMask][google.protobuf.FieldMask].
  // Updatable fields:
  //
  //   * `id`
  //   * `update_at`
  //   * `create_at`
  google.protobuf.FieldMask update_mask = 3;
}

// Response message for [GreetingEntityService.UpdateGreetingEntity][v1.GreetingEntityService.UpdateGreetingEntity].
message UpdateGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  GreetingEntity details = 3;
}

// Request message for [GreetingEntityService.ListGreetingEntitys][v1.GreetingEntityService.ListGreetingEntitys].
message ListGreetingEntitysRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // The standard page number, start with zero, use cursor or size as page rotation.
  int32 page = 2;

  // The standard list page size.
  int32 size = 3;

  // The standard list page cursor.
  string cursor = 4;

  // The search keyword.
  string query = 5;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 6;

  // A comma-separated list of fields to order by, sorted in ascending order.
  // Use "desc" after a field name for descending.
  // Supported fields:
  //   * `create_at`
  //   * `update_at`
  string order_by = 7;

  // A comma-separated list of fields to group by
  string group_by = 8;

  // filter struct for list.
  GreetingEntityFilter f = 9;

  // option struct for list.
  GreetingEntityListOption o = 10;

  // exclude ids for this request, filled by ListGreetingEntitysResponse.
  repeated int64 exclude_ids = 11;
}

// Response message for [GreetingEntityService.ListGreetingEntitys][v1.GreetingEntityService.ListGreetingEntitys].
message ListGreetingEntitysResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  message Details {
    // A list of GreetingEntitys that matches the specified filter in the request.
    repeated GreetingEntity items = 1;
    // next request.
    ListGreetingEntitysRequest next_request = 2;
    // total items count of this filter.
    int32 total_count = 3;
  }
  Details details = 3;
}

// Request message for [GreetingEntityService.DeleteGreetingEntity][v1.GreetingEntityService.DeleteGreetingEntity].
message DeleteGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The resource name of the GreetingEntity to delete.
  // Format:
  // `echo/*/greeting_entities/{name}`
  int64 id = 2;
}

// Response message for [GreetingEntityService.DeleteGreetingEntity][v1.GreetingEntityService.DeleteGreetingEntity].
message DeleteGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  GreetingEntity details = 3;
}

// Request message for [GreetingEntityService.DeleteGreetingEntitys][v1.GreetingEntityService.DeleteGreetingEntitys].
message DeleteGreetingEntitysRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // filter struct for delete items.
  GreetingEntityFilter f = 2;
}

// Response message for [GreetingEntityService.DeleteGreetingEntitys][v1.GreetingEntityService.DeleteGreetingEntitys].
message DeleteGreetingEntitysResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // deleted id list.
  repeated int64 details = 3;
}
// Request message for [GreetingEntityService.ImportGreetingEntity][v1.GreetingEntityService.ImportGreetingEntity].
message ImportGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The desired input configs. The contents of all input configs will be
  // imported in one batch.
  ImportGreetingEntityConfig import_config = 2;
}

// Response message for [GreetingEntityService.ImportGreetingEntity][v1.GreetingEntityService.ImportGreetingEntity].
message ImportGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // success or fail.
  bool details = 3;
}
// Request message for [GreetingEntityService.ExportGreetingEntity][v1.GreetingEntityService.ExportGreetingEntity].
message ExportGreetingEntityRequest {
  // The path of the GreetingEntity's parent resource, if exists.
  // Format: `echo/*`
  string parent = 1;

  // Required. The desired output location.
  ExportGreetingEntityConfig export_config = 2;
}

// Response message for [GreetingEntityService.ExportGreetingEntity][v1.GreetingEntityService.ExportGreetingEntity].
message ExportGreetingEntityResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // All of the files that are exported in this export operation.
  repeated string details = 3;
}
