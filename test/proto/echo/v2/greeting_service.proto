// Code generated by github.com/artistml/toolkits/cmd/gen-proto. DO NOT EDIT.
syntax = "proto3";
package echo.v2;
option go_package = "github.com/artistml/echo/v2;echoV2";


import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "echo/v2/greeting.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Greeting Service"
    version : "2.0"
    contact : {
      name : "Greeting Service"
      url : "http://github.com/artistml/toolkits"
    }
  }
  host : "github.com/artistml/toolkits"
  base_path : "/echo/v2/greeting"
  schemes : HTTP
  schemes : HTTPS
  consumes : "application/json"
  produces : "application/json"
  external_docs : {
    description : "API specification in Markdown",
    url : "http://github.com/artistml/toolkits/echo/v2/greeting"
  }
};

// The service that handles the CRUD of Greeting.
service GreetingService {

  option (google.api.default_host) = "github.com/artistml/toolkits";
  // Creates a Greeting.
  rpc CreateGreeting(CreateGreetingRequest)
      returns (CreateGreetingResponse) {

  }

  // Gets a Greeting.
  rpc GetGreeting(GetGreetingRequest)
      returns (GetGreetingResponse) {

  }

  // Updates a Greeting.
  rpc UpdateGreeting(UpdateGreetingRequest)
      returns (UpdateGreetingResponse) {

  }

  // Lists Greetings in a Location.
  rpc ListGreetings(ListGreetingsRequest)
      returns (ListGreetingsResponse) {

  }

  // Deletes a Greeting.
  rpc DeleteGreeting(DeleteGreetingRequest)
      returns (DeleteGreetingResponse) {

  }

  // Batch delete Greeting by filter.
  rpc DeleteGreetings(DeleteGreetingsRequest)
      returns (DeleteGreetingsResponse) {

  }

  // Imports a Greeting.
  rpc ImportGreeting(ImportGreetingRequest)
      returns (ImportGreetingResponse) {

  }

  // Exports a Greeting.
  rpc ExportGreeting(ExportGreetingRequest)
      returns (ExportGreetingResponse) {

  }
}

// Request message for [GreetingService.CreateGreeting][v2.GreetingService.CreateGreeting].
message CreateGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format : ``
  string parent = 1;

  // Required. The Greeting to create.
  Greeting greeting = 2;
}

// Response message for [GreetingService.CreateGreeting][v2.GreetingService.CreateGreeting].
message CreateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.GetGreeting][v2.GreetingService.GetGreeting].
message GetGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format : ``
  string parent = 1;

  // Required. The id of the Greeting in database.
  int64 id = 2;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 3;
}

// Response message for [GreetingService.GetGreeting][v2.GreetingService.GetGreeting].
message GetGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.UpdateGreeting][v2.GreetingService.UpdateGreeting].
message UpdateGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format : ``
  string parent = 1;

  // Required. The Greeting which replaces the resource on the server.
  Greeting greeting = 2;

  // Required. The update mask applies to the resource.
  // For the `FieldMask` definition, see [google.protobuf.FieldMask][google.protobuf.FieldMask].
  // Updatable fields:
  //
  //   * `id`
  //   * `update_at`
  //   * `create_at`
  google.protobuf.FieldMask update_mask = 3;
}

// Response message for [GreetingService.UpdateGreeting][v2.GreetingService.UpdateGreeting].
message UpdateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.ListGreetings][v2.GreetingService.ListGreetings].
message ListGreetingsRequest {
  // The standard page number, start with zero, use cursor or size as page rotation.
  int32 page = 1;

  // The standard list page size.
  int32 size = 2;

  // The standard list page cursor.
  string cursor = 3;

  // The search keyword.
  string query = 4;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 5;

  // A comma-separated list of fields to order by, sorted in ascending order.
  // Use "desc" after a field name for descending.
  // Supported fields:
  //   * `create_at`
  //   * `update_at`
  string order_by = 6;

  // A comma-separated list of fields to group by
  string group_by = 7;

  // filter struct for list.
  GreetingFilter f = 8;

  // option struct for list.
  GreetingListOption o = 9;
}

// Response message for [GreetingService.ListGreetings][v2.GreetingService.ListGreetings].
message ListGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  message Details {
    // A list of Greetings that matches the specified filter in the request.
    repeated Greeting items = 1;
    // next page number.
    int32 next_page = 2;
    // next page size.
    int32 next_size = 3;
    // next page cursor.
    string next_cursor = 4;
    // total items count of this filter.
    int32 total_count = 5;
  }
  Details details = 3;
}

// Request message for [GreetingService.DeleteGreeting][v2.GreetingService.DeleteGreeting].
message DeleteGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format : ``
  string parent = 1;

  // Required. The resource name of the Greeting to delete.
  // Format:
  // ``
  int64 id = 2;
}

// Response message for [GreetingService.DeleteGreeting][v2.GreetingService.DeleteGreeting].
message DeleteGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.DeleteGreetings][v2.GreetingService.DeleteGreetings].
message DeleteGreetingsRequest {
  // filter struct for delete items.
  GreetingFilter f = 1;
}

// Response message for [GreetingService.DeleteGreetings][v2.GreetingService.DeleteGreetings].
message DeleteGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // deleted id list.
  repeated int64 details = 3;
}
// Request message for [GreetingService.ImportGreeting][v2.GreetingService.ImportGreeting].
message ImportGreetingRequest {
  // Required. The desired input configs. The contents of all input configs will be
  // imported in one batch.
  repeated ImportGreetingConfig import_configs = 1;
}

// Response message for [GreetingService.ImportGreeting][v2.GreetingService.ImportGreeting].
message ImportGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // success or fail.
  bool details = 3;
}
// Request message for [GreetingService.ExportGreeting][v2.GreetingService.ExportGreeting].
message ExportGreetingRequest {
  // Required. The desired output location.
  ExportGreetingConfig export_config = 1;
}

// Response message for [GreetingService.ExportGreeting][v2.GreetingService.ExportGreeting].
message ExportGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // All of the files that are exported in this export operation.
  repeated string details = 3;
}
